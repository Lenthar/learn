创建版本库
	初始化一个Git仓库，使用git init命令。
	添加文件到Git仓库，分两步：
		第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
		第二步，使用命令git commit，完成。

查看状态	
    要随时掌握工作区的状态，使用git status命令。
    如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
	
版本退回
    HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
    穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
    要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

管理修改
	Git跟踪并管理的是修改，而非文件。	你会问，什么是修改？比如你新增了一行，这就是一个修改，删除了一行，也是一个修改，更改了某些字符，也是一个修改，删了一些又加了一些，也是一个修改，甚至创建一个新文件，也算一个修改。	
	Git是如何跟踪修改的，每次修改，如果不add到暂存区，那就不会加入到commit中。
	
撤消更改
	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
	
删除文件
	命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容
	
添加远程库
	要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
	关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
	此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

从远程库克隆
	$ git clone git@github.com:lenthar/gitskills.git
	
分支管理
	创建与合并分支
		Git鼓励大量使用分支：
			查看分支：git branch
			创建分支：git branch <name>
			切换分支：git checkout <name>
			创建+切换分支：git checkout -b <name>
			合并某分支到当前分支：git merge <name>
			删除分支：git branch -d <name>
	解决冲突
		人生不如意之事十之八九，合并分支往往也不是一帆风顺的。
			用带参数的git log也可以看到分支的合并情况：

			$ git log --graph --pretty=oneline --abbrev-commit
			*   59bc1cb conflict fixed
			|\
			| * 75a857c AND simple
			* | 400b400 & simple
			|/
			* fec145a branch test
			...
			
		当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
		用git log --graph命令可以看到分支合并图。
	分支管理策略
		准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：
		$ git merge --no-ff -m "merge with no-ff" dev
		
		因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。

		合并后，我们用git log看看分支历史：
		$ git log --graph --pretty=oneline --abbrev-commit
		*   7825a50 merge with no-ff
		|\
		| * 6224937 add merge
		|/
		*   59bc1cb conflict fixed
	Bug分支
		当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交：
			$ git stash
			
			修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：
				$ git checkout master
				Switched to branch 'master'
				Your branch is ahead of 'origin/master' by 2 commits.
				
				$ git merge --no-ff -m "merged bug fix 101" issue-101
				Merge made by the 'recursive' strategy.
				 readme.txt |    2 +-
				 1 file changed, 1 insertion(+), 1 deletion(-)
				$ git branch -d issue-101
				Deleted branch issue-101 (was cc17032).

			修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
			当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。

	Feature分支
		添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。
			一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。

			但是，就在此时，接到上级命令，因经费不足，新功能必须取消！虽然白干了，但是这个分支还是必须就地销毁：

			$ git branch -d feature-vulcan
			error: The branch 'feature-vulcan' is not fully merged.
			If you are sure you want to delete it, run 'git branch -D feature-vulcan'.

			销毁失败。Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用命令git branch -D feature-vulcan。

			现在我们强行删除：
			$ git branch -D feature-vulcan
			Deleted branch feature-vulcan (was 756d4af).
	多人协作
			多人协作的工作模式通常是这样：

					首先，可以试图用git push origin branch-name推送自己的修改；
					如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
					如果合并有冲突，则解决冲突，并在本地提交；
					没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
				如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

				这就是多人协作的工作模式，一旦熟悉了，就非常简单。
				小结
					查看远程库信息，使用git remote -v；
					本地新建的分支如果不推送到远程，对其他人就是不可见的；
					从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
					在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
					建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
					从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
标签管理
	创建标签
		在Git中打标签非常简单，首先，切换到需要打标签的分支上：

		$ git branch
		* dev
		  master
		$ git checkout master
		Switched to branch 'master'

		然后，敲命令git tag <name>就可以打一个新标签：

		$ git tag v1.0

		可以用命令git tag查看所有标签：

		$ git tag
		v1.0

		默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？

		方法是找到历史提交的commit id，然后打上就可以了：

		$ git log --pretty=oneline --abbrev-commit
		6a5819e merged bug fix 101
		cc17032 fix bug 101
		7825a50 merge with no-ff
		6224937 add merge
		59bc1cb conflict fixed
		400b400 & simple
		75a857c AND simple
		fec145a branch test
		d17efd8 remove test.txt
		...

		比方说要对add merge这次提交打标签，它对应的commit id是6224937，敲入命令：

		$ git tag v0.9 6224937

		再用命令git tag查看标签：

		$ git tag
		v0.9
		v1.0

		注意，标签不是按时间顺序列出，而是按字母排序的。可以用git show <tagname>查看标签信息：

		$ git show v0.9
		commit 622493706ab447b6bb37e4e2a2f276a20fed2ab4
		Author: Michael Liao <askxuefeng@gmail.com>
		Date:   Thu Aug 22 11:22:08 2013 +0800

			add merge
		...

		可以看到，v0.9确实打在add merge这次提交上。

		还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：

		$ git tag -a v0.1 -m "version 0.1 released" 3628164

		用命令git show <tagname>可以看到说明文字：

		$ git show v0.1
		tag v0.1
		Tagger: Michael Liao <askxuefeng@gmail.com>
		Date:   Mon Aug 26 07:28:11 2013 +0800

		version 0.1 released

		commit 3628164fb26d48395383f8f31179f24e0882e1e0
		Author: Michael Liao <askxuefeng@gmail.com>
		Date:   Tue Aug 20 15:11:49 2013 +0800

			append GPL

		还可以通过-s用私钥签名一个标签：

		$ git tag -s v0.2 -m "signed version 0.2 released" fec145a

		签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错：

		gpg: signing failed: secret key not available
		error: gpg failed to sign the data
		error: unable to sign the tag

		如果报错，请参考GnuPG帮助文档配置Key。

		用命令git show <tagname>可以看到PGP签名信息：

		$ git show v0.2
		tag v0.2
		Tagger: Michael Liao <askxuefeng@gmail.com>
		Date:   Mon Aug 26 07:28:33 2013 +0800

		signed version 0.2 released
		-----BEGIN PGP SIGNATURE-----
		Version: GnuPG v1.4.12 (Darwin)

		iQEcBAABAgAGBQJSGpMhAAoJEPUxHyDAhBpT4QQIAKeHfR3bo...
		-----END PGP SIGNATURE-----

		commit fec145accd63cdc9ed95a2f557ea0658a2a6537f
		Author: Michael Liao <askxuefeng@gmail.com>
		Date:   Thu Aug 22 10:37:30 2013 +0800

			branch test

		用PGP签名的标签是不可伪造的，因为可以验证PGP签名。验证签名的方法比较复杂，这里就不介绍了
		
		
		命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
		git tag -a <tagname> -m "blablabla..."可以指定标签信息；
		git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
		命令git tag可以查看所有标签。
	操作标签
		如果标签打错了，也可以删除：

		$ git tag -d v0.1
		Deleted tag 'v0.1' (was e078af9)

		因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。

		如果要推送某个标签到远程，使用命令git push origin <tagname>：

		$ git push origin v1.0
		Total 0 (delta 0), reused 0 (delta 0)
		To git@github.com:michaelliao/learngit.git
		 * [new tag]         v1.0 -> v1.0

		或者，一次性推送全部尚未推送到远程的本地标签：

		$ git push origin --tags
		Counting objects: 1, done.
		Writing objects: 100% (1/1), 554 bytes, done.
		Total 1 (delta 0), reused 0 (delta 0)
		To git@github.com:michaelliao/learngit.git
		 * [new tag]         v0.2 -> v0.2
		 * [new tag]         v0.9 -> v0.9

		如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：

		$ git tag -d v0.9
		Deleted tag 'v0.9' (was 6224937)

		然后，从远程删除。删除命令也是push，但是格式如下：

		$ git push origin :refs/tags/v0.9
		To git@github.com:michaelliao/learngit.git
		 - [deleted]         v0.9

		要看看是否真的从远程库删除了标签，可以登陆GitHub查看

